{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","components/Chart/Chart.jsx","api/index.js","components/CountryPicker/CountryPicker.jsx","img/logo.png","App.js","reportWebVitals.js","index.js","App.module.css","components/Chart/Chart.module.css"],"names":["module","exports","Cards","data","cases","recovered","deaths","updated","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","Date","toDateString","Chart","url","dailyurl","dailyData","Object","keys","length","constructor","labels","datasets","label","values","fill","borderColor","backgroundColor","url1","url2","dailyurl1","dailyurl2","fetchdata","country","a","axios","get","console","log","fetchDailyData","fetchCountries","countries","map","curr","CountryPicker","handleCountryChange","useState","fetchedCountries","setFetchedCountries","useEffect","fetchApi","FormControl","formcontrol","NativeSelect","defaultValue","onChange","e","target","value","i","App","state","window","location","reload","fetchedData","fetchedDailyData","timeline","setState","fetchedGlobalDailyData","this","image","src","coronaImage","alt","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.504b497a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__6p1kB\",\"card\":\"Cards_card__eS8UT\",\"infected\":\"Cards_infected__ZGT_S\",\"recovered\":\"Cards_recovered__3W3ug\",\"deaths\":\"Cards_deaths__2eWte\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nfunction Cards({ data: { cases, recovered, deaths, updated } }) {\r\n    if(!cases)\r\n        return \"Loading...\";\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={cases} duration={2.5} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textPrimary\">{new Date(updated).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of active cases of Covid-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                        <Typography variant=\"h5\">\r\n                        <CountUp start={0}  end={recovered} duration={2.5} separator=\",\"  />\r\n                        </Typography>\r\n                        <Typography color=\"textPrimary\">{new Date(updated).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of recovered from Covid-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                        <Typography variant=\"h5\">\r\n                        <CountUp  start={0}  end={deaths}  duration={2.5}  separator=\",\"  />\r\n                        </Typography>\r\n                        <Typography color=\"textPrimary\">{new Date(updated).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of deaths caused by Covid-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards\r\n","import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport styles from './Chart.module.css';\r\n\r\nfunction Chart ({dailyData}) {\r\n    var data,cases, recovered, deaths;\r\n    if (Object.keys(dailyData).length === 0 && dailyData.constructor === Object)\r\n    {\r\n        return \"\";\r\n    }\r\n        cases= dailyData.cases;\r\n        deaths =dailyData.deaths;\r\n        recovered =dailyData.recovered;\r\n        var a=Object.keys(cases), b=Object.values(cases), c=Object.values(recovered);\r\n        var d=Object.values(deaths)\r\n        \r\n        data = {\r\n            labels: a,\r\n            datasets: [\r\n          {\r\n                label: \"Infected\",\r\n                data: b,\r\n                fill: false,\r\n                borderColor: \"#blue\",\r\n                backgroundColor: \"rgba(0, 0, 255, 0.5)\"\r\n          },\r\n          {\r\n            label: \"Recovered\",\r\n            data: c,\r\n            fill: false,\r\n            borderColor: \"#green\",\r\n            backgroundColor: \"rgba(0, 255, 0, 0.5)\"\r\n          },\r\n          {\r\n            label: \"Death\",\r\n            data: d,\r\n            fill: true,\r\n            borderColor:\"#red\",\r\n            backgroundColor: \"rgba(255, 0, 0, 0.5)\"\r\n          }\r\n        ]\r\n        };\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <Line data={data}/>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Chart;\r\n","import axios from 'axios';\r\n\r\nconst url1= \"https://corona.lmao.ninja/v2/\";\r\nconst url2= \"?yesterday=true\";\r\nconst dailyurl1= \"https://corona.lmao.ninja/v2/historical/\";\r\nconst dailyurl2=\"?lastdays=200\";\r\nvar url, dailyurl;\r\nexport const fetchdata = async (country) => {\r\n    \r\n    if(country)\r\n    {\r\n        url=`${url1}countries/${country}${url2}`;\r\n    }\r\n    else\r\n    {\r\n        url=`${url1}all${url2}`;\r\n    }\r\n\r\n    try {\r\n        const {data: { cases, recovered, deaths, updated}} = await axios.get(url);\r\n\r\n        return { cases, recovered, deaths, updated };\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async (country) => {\r\n    try {\r\n        if(country!==\"\")\r\n        {\r\n            dailyurl= `${dailyurl1}${country}${dailyurl2}`;\r\n        }\r\n        else\r\n        {\r\n            dailyurl= `${dailyurl1}all${dailyurl2}`;\r\n        }\r\n        const { data } = await axios.get(dailyurl);\r\n        return data;\r\n    }catch(error) {\r\n        console.log(error);\r\n    }\r\n}\r\nexport const fetchCountries = async () => {\r\n    try{\r\n        const { data } = await axios.get('https://corona.lmao.ninja/v2/countries?yesterday=true&strict=true&query')\r\n\r\n        const countries = data.map( (curr) => {\r\n            return curr.country;\r\n        } );\r\n\r\n        return countries;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}","import React,{ useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl, StylesProvider } from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\nimport { fetchCountries } from '../../api';\r\nfunction CountryPicker({ handleCountryChange }) {\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchApi = async () => {\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n\r\n        fetchApi();\r\n    },[setFetchedCountries]);\r\n      \r\n    return (\r\n        <FormControl className={styles.formcontrol}>\r\n            <NativeSelect defaultValue='' onChange={(e) => handleCountryChange(e.target.value)}>\r\n                <option value='global'>Global</option>\r\n                {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;\r\n","export default __webpack_public_path__ + \"static/media/logo.749ef9e0.png\";","import React from 'react';\nimport styles from './App.module.css';\nimport { Cards, Chart,CountryPicker } from './components';\nimport { fetchdata } from './api';\nimport { fetchDailyData } from './api';\nimport coronaImage from './img/logo.png';\n\nclass App extends React.Component {\n  state = {\n    data: {},\n    dailyData: {},\n    country: '',\n  }\n\n  async componentDidMount() {\n    const fetchedData= await fetchdata(\"\");\n    const fetchedGlobalDailyData= await fetchDailyData(\"\");\n    if(fetchedGlobalDailyData)\n      this.setState({ dailyData: fetchedGlobalDailyData });\n    this.setState({ data: fetchedData });\n  }\n  \n  handleCountryChange = async (country) => {\n    if(country===\"global\")\n      window.location.reload(false);\n      \n    const fetchedData= await fetchdata(country);\n    var fetchedDailyData= await fetchDailyData(country);\n    if(country)\n      fetchedDailyData=fetchedDailyData.timeline;\n    else\n    fetchedDailyData={};\n\n    this.setState({ data: fetchedData, country: country, dailyData: fetchedDailyData });\n  }\n\nrender() {\n  const { data, country, dailyData } = this.state;\n  return (\n    <div className={styles.container}>\n      <img className={styles.image} src={coronaImage} alt=\"covid-19 logo\" />\n      <Cards data={data} />\n      <CountryPicker handleCountryChange ={this.handleCountryChange}/>\n      <Chart dailyData= {dailyData} />\n    </div>\n  );\n   }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1e00j\",\"image\":\"App_image__wjVPQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__3q4a6\"};"],"sourceRoot":""}