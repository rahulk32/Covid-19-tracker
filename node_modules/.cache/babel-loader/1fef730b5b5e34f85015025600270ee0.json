{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\covid-19-tracker\\\\src\\\\components\\\\Chart\\\\Chart.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport Line from 'react-chartjs-2';\nimport styles from './Chart.module.css';\nimport CountryPicker from '../CountryPicker/CountryPicker';\n\nfunction Chart() {\n  _s();\n\n  //const dailyurl= \"https://corona.lmao.ninja/v2/historical/India?lastdays=70\";\n  const [dailyData, setDailyData] = useState();\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData(await fetchDailyData());\n    };\n\n    fetchAPI();\n  }, []); // country,province, timeline;\n\n  if (dailyData) var {\n    country,\n    province,\n    timeline\n  } = dailyData;\n  console.log(dailyData);\n  console.log(timeline);\n  /*const lineChart = {\r\n      if(dailyData) \r\n      {\r\n      (\r\n          <line\r\n          data={{\r\n              labels:dailyData(({date}) => date),\r\n              datasets: [{\r\n                  data: dailyData(({cases}) => cases),\r\n                  label: 'Infected',\r\n                  borderColor: '#3333ff',\r\n                  fill: true,\r\n              }, {\r\n                  dailyData(({recovered}) => recovered),\r\n                  label: 'recovered',\r\n                  borderColor: '#3333ff',\r\n                  fill: true,\r\n              }, {\r\n                  dailyData(({deaths}) => deaths),\r\n                  label: 'deaths',\r\n                  borderColor: '#red',\r\n                  backgroundColor:rgba(255, 0, 0, 0.5),\r\n                  fill: true,\r\n              }],\r\n          }}\r\n          />}\r\n      else    \r\n          null\r\n      )\r\n  };*/\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Chart, \"Df7uINklA7E0y88LS1DaV7Pf47Q=\");\n\n_c = Chart;\nexport default Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["D:/covid-19-tracker/src/components/Chart/Chart.jsx"],"names":["React","useState","useEffect","fetchDailyData","Line","styles","CountryPicker","Chart","dailyData","setDailyData","fetchAPI","country","province","timeline","console","log","container"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,aAAP,MAA0B,gCAA1B;;AAEA,SAASC,KAAT,GAAkB;AAAA;;AACd;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,EAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMQ,QAAQ,GAAG,YAAY;AACzBD,MAAAA,YAAY,CAAC,MAAMN,cAAc,EAArB,CAAZ;AACH,KAFD;;AAGAO,IAAAA,QAAQ;AACX,GALQ,EAKP,EALO,CAAT,CAJc,CAUd;;AACA,MAAGF,SAAH,EACI,IAAI;AAACG,IAAAA,OAAD;AAAUC,IAAAA,QAAV;AAAoBC,IAAAA;AAApB,MAAgCL,SAApC;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYP,SAAZ;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACJ;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,sBACI;AAAK,IAAA,SAAS,EAAER,MAAM,CAACW;AAAvB;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GAlDQT,K;;KAAAA,K;AAoDT,eAAeA,KAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport Line from 'react-chartjs-2';\r\nimport styles from './Chart.module.css';\r\nimport CountryPicker from '../CountryPicker/CountryPicker';\r\n\r\nfunction Chart () {\r\n    //const dailyurl= \"https://corona.lmao.ninja/v2/historical/India?lastdays=70\";\r\n    const [dailyData, setDailyData] = useState();\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        fetchAPI();\r\n    },[]);\r\n    // country,province, timeline;\r\n    if(dailyData)\r\n        var {country, province, timeline} = dailyData;\r\n        console.log(dailyData);\r\n        console.log(timeline);\r\n    /*const lineChart = {\r\n        if(dailyData) \r\n        {\r\n        (\r\n            <line\r\n            data={{\r\n                labels:dailyData(({date}) => date),\r\n                datasets: [{\r\n                    data: dailyData(({cases}) => cases),\r\n                    label: 'Infected',\r\n                    borderColor: '#3333ff',\r\n                    fill: true,\r\n                }, {\r\n                    dailyData(({recovered}) => recovered),\r\n                    label: 'recovered',\r\n                    borderColor: '#3333ff',\r\n                    fill: true,\r\n                }, {\r\n                    dailyData(({deaths}) => deaths),\r\n                    label: 'deaths',\r\n                    borderColor: '#red',\r\n                    backgroundColor:rgba(255, 0, 0, 0.5),\r\n                    fill: true,\r\n                }],\r\n            }}\r\n            />}\r\n        else    \r\n            null\r\n        )\r\n    };*/\r\n    return (\r\n        <div className={styles.container}>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;\r\n"]},"metadata":{},"sourceType":"module"}