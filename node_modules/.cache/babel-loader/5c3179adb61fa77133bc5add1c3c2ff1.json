{"ast":null,"code":"import axios from 'axios';\nconst url1 = \"https://corona.lmao.ninja/v2/\";\nconst url2 = \"?yesterday=true\";\nconst dailyurl1 = \"https://corona.lmao.ninja/v2/historical/\";\nconst dailyurl2 = \"?lastdays=200\";\nvar url, dailyurl;\nexport const fetchdata = async country => {\n  if (country) {\n    url = `${url1}countries/${country}${url2}`;\n    dailyurl = `${dailyurl1}${country}${dailyurl2}`;\n  } else {\n    url = `${url1}all${url2}`;\n    dailyurl = `${dailyurl1}all${dailyurl2}`;\n  }\n\n  console.log(url);\n\n  try {\n    const {\n      data: {\n        cases,\n        recovered,\n        deaths,\n        updated\n      }\n    } = await axios.get(url);\n    return {\n      cases,\n      recovered,\n      deaths,\n      updated\n    };\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchDailyData = async () => {\n  try {\n    const {\n      data\n    } = await axios.get(dailyurl);\n\n    if (country) {\n      const timeline = data.timeline;\n      const {\n        cases,\n        deaths,\n        recovered\n      } = timeline;\n    } else {\n      const {\n        cases,\n        deaths,\n        recovered\n      } = data;\n    }\n\n    console.log(data);\n    return {}; //console.log(typeof(data));\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchCountries = async () => {\n  try {\n    const {\n      data\n    } = await axios.get('https://corona.lmao.ninja/v2/countries?yesterday=true&strict=true&query'); //console.log(data);\n\n    const countries = data.map(curr => {\n      return curr.country;\n    }); //console.log(countries);\n\n    return countries;\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["D:/covid-19-tracker/src/api/index.js"],"names":["axios","url1","url2","dailyurl1","dailyurl2","url","dailyurl","fetchdata","country","console","log","data","cases","recovered","deaths","updated","get","error","fetchDailyData","timeline","fetchCountries","countries","map","curr"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,IAAI,GAAE,+BAAZ;AACA,MAAMC,IAAI,GAAE,iBAAZ;AACA,MAAMC,SAAS,GAAE,0CAAjB;AACA,MAAMC,SAAS,GAAC,eAAhB;AACA,IAAIC,GAAJ,EAASC,QAAT;AACA,OAAO,MAAMC,SAAS,GAAG,MAAOC,OAAP,IAAmB;AAExC,MAAGA,OAAH,EACA;AACIH,IAAAA,GAAG,GAAE,GAAEJ,IAAK,aAAYO,OAAQ,GAAEN,IAAK,EAAvC;AACAI,IAAAA,QAAQ,GAAG,GAAEH,SAAU,GAAEK,OAAQ,GAAEJ,SAAU,EAA7C;AACH,GAJD,MAMA;AACIC,IAAAA,GAAG,GAAE,GAAEJ,IAAK,MAAKC,IAAK,EAAtB;AACAI,IAAAA,QAAQ,GAAG,GAAEH,SAAU,MAAKC,SAAU,EAAtC;AACH;;AAEDK,EAAAA,OAAO,CAACC,GAAR,CAAYL,GAAZ;;AACA,MAAI;AACA,UAAM;AAACM,MAAAA,IAAI,EAAE;AAAEC,QAAAA,KAAF;AAASC,QAAAA,SAAT;AAAoBC,QAAAA,MAApB;AAA4BC,QAAAA;AAA5B;AAAP,QAA+C,MAAMf,KAAK,CAACgB,GAAN,CAAUX,GAAV,CAA3D;AAEA,WAAO;AAAEO,MAAAA,KAAF;AAASC,MAAAA,SAAT;AAAoBC,MAAAA,MAApB;AAA4BC,MAAAA;AAA5B,KAAP;AACH,GAJD,CAIE,OAAOE,KAAP,EAAc;AACZR,IAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACH;AACJ,CArBM;AAuBP,OAAO,MAAMC,cAAc,GAAG,YAAY;AACtC,MAAI;AACA,UAAM;AAAEP,MAAAA;AAAF,QAAW,MAAMX,KAAK,CAACgB,GAAN,CAAUV,QAAV,CAAvB;;AACA,QAAGE,OAAH,EACA;AACI,YAAMW,QAAQ,GAAGR,IAAI,CAACQ,QAAtB;AACA,YAAM;AAACP,QAAAA,KAAD;AAAQE,QAAAA,MAAR;AAAgBD,QAAAA;AAAhB,UAA6BM,QAAnC;AACH,KAJD,MAMA;AACI,YAAM;AAACP,QAAAA,KAAD;AAAQE,QAAAA,MAAR;AAAgBD,QAAAA;AAAhB,UAA6BF,IAAnC;AACH;;AACDF,IAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;AACA,WAAO,EAAP,CAZA,CAaA;AACH,GAdD,CAcC,OAAMM,KAAN,EAAa;AACVR,IAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACH;AACJ,CAlBM;AAmBP,OAAO,MAAMG,cAAc,GAAG,YAAY;AACtC,MAAG;AACC,UAAM;AAAET,MAAAA;AAAF,QAAW,MAAMX,KAAK,CAACgB,GAAN,CAAU,yEAAV,CAAvB,CADD,CAEC;;AACA,UAAMK,SAAS,GAAGV,IAAI,CAACW,GAAL,CAAWC,IAAD,IAAU;AAClC,aAAOA,IAAI,CAACf,OAAZ;AACH,KAFiB,CAAlB,CAHD,CAQC;;AACA,WAAOa,SAAP;AACH,GAVD,CAUE,OAAOJ,KAAP,EAAc;AACZR,IAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACH;AACJ,CAdM","sourcesContent":["import axios from 'axios';\r\n\r\nconst url1= \"https://corona.lmao.ninja/v2/\";\r\nconst url2= \"?yesterday=true\";\r\nconst dailyurl1= \"https://corona.lmao.ninja/v2/historical/\";\r\nconst dailyurl2=\"?lastdays=200\";\r\nvar url, dailyurl;\r\nexport const fetchdata = async (country) => {\r\n    \r\n    if(country)\r\n    {\r\n        url=`${url1}countries/${country}${url2}`;\r\n        dailyurl= `${dailyurl1}${country}${dailyurl2}`;\r\n    }\r\n    else\r\n    {\r\n        url=`${url1}all${url2}`;\r\n        dailyurl= `${dailyurl1}all${dailyurl2}`;\r\n    }\r\n\r\n    console.log(url);\r\n    try {\r\n        const {data: { cases, recovered, deaths, updated}} = await axios.get(url);\r\n\r\n        return { cases, recovered, deaths, updated };\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const { data } = await axios.get(dailyurl);\r\n        if(country)\r\n        {\r\n            const timeline = data.timeline;\r\n            const {cases, deaths, recovered} = timeline;\r\n        }\r\n        else\r\n        {\r\n            const {cases, deaths, recovered} = data;\r\n        }\r\n        console.log(data);\r\n        return {};\r\n        //console.log(typeof(data));\r\n    }catch(error) {\r\n        console.log(error);\r\n    }\r\n}\r\nexport const fetchCountries = async () => {\r\n    try{\r\n        const { data } = await axios.get('https://corona.lmao.ninja/v2/countries?yesterday=true&strict=true&query')\r\n        //console.log(data);\r\n        const countries = data.map( (curr) => {\r\n            return curr.country;\r\n        } );\r\n        \r\n        \r\n        //console.log(countries);\r\n        return countries;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}